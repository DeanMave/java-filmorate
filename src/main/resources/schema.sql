DROP TABLE IF EXISTS friendship;
DROP TABLE IF EXISTS likes;
DROP TABLE IF EXISTS film_genre;
DROP TABLE IF EXISTS film_director;
DROP TABLE IF EXISTS review_likes;
DROP TABLE IF EXISTS review_dislikes;
DROP TABLE IF EXISTS reviews;
DROP TABLE IF EXISTS film CASCADE;
DROP TABLE IF EXISTS genre;
DROP TABLE IF EXISTS rating;
DROP TABLE IF EXISTS director;
DROP TABLE IF EXISTS users CASCADE;
DROP TABLE IF EXISTS reviews CASCADE;
DROP TABLE IF EXISTS event;
DROP TABLE IF EXISTS review_likes;
DROP TABLE IF EXISTS review_dislikes;

 create TABLE IF NOT EXISTS rating (
    rating_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    rating_name VARCHAR(10)
);

create TABLE IF NOT EXISTS genre (
    genre_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR(50)
);

create TABLE IF NOT EXISTS director (
director_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
name VARCHAR(100)
);

create TABLE IF NOT EXISTS film (
    film_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    description VARCHAR(200) NOT NULL,
    release_date DATE NOT NULL,
    duration INTEGER NOT NULL,
    rating_id INTEGER REFERENCES rating(rating_id)
);

create TABLE IF NOT EXISTS film_genre (
    film_id INTEGER REFERENCES film(film_id),
    genre_id INTEGER REFERENCES genre(genre_id),
    CONSTRAINT pk_film_genre PRIMARY KEY (film_id, genre_id)
);

create TABLE IF NOT EXISTS film_director (
film_id INTEGER REFERENCES film(film_id),
director_id INTEGER REFERENCES director(director_id),
CONSTRAINT pk_film_director PRIMARY KEY (film_id, director_id)
);

create TABLE IF NOT EXISTS users (
    user_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR(100),
    login VARCHAR(100) NOT NULL,
    email VARCHAR(100) NOT NULL,
    birthday DATE
);

create TABLE IF NOT EXISTS likes (
    film_id INTEGER REFERENCES film(film_id),
    user_id INTEGER REFERENCES users(user_id),
    CONSTRAINT pk_likes PRIMARY KEY (film_id, user_id)
);

create TABLE IF NOT EXISTS friendship (
    user_id INTEGER REFERENCES users(user_id),
    friend_id INTEGER REFERENCES users(user_id),
    status VARCHAR(50) CHECK (status IN ('PENDING', 'CONFIRMED'))
);

CREATE TABLE IF NOT EXISTS reviews (
    review_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    film_id INTEGER REFERENCES film(film_id),
    user_id INTEGER REFERENCES users(user_id),
    content VARCHAR(300),
    is_positive BOOLEAN
);

CREATE TABLE IF NOT EXISTS review_likes (
    review_id INTEGER NOT NULL,
    user_id INTEGER NOT NULL,
    PRIMARY KEY (review_id, user_id)
);

CREATE TABLE IF NOT EXISTS review_dislikes (
   review_id INTEGER NOT NULL,
   user_id INTEGER NOT NULL,
   PRIMARY KEY (review_id, user_id)
);

CREATE TABLE IF NOT EXISTS event
(
	timestamp BIGINT,
	user_id   INTEGER REFERENCES users(user_id),
	eventType varchar(15) NOT NULL,
	operation varchar(15) NOT NULL,
	event_id  INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
	entity_id INTEGER NOT NULL
);
