drop table IF EXISTS friendship;
drop table IF EXISTS likes;
drop table IF EXISTS film_genre;
drop table IF EXISTS film_director;
drop table IF EXISTS film;
drop table IF EXISTS genre;
drop table IF EXISTS rating;
drop table IF EXISTS director;
drop table IF EXISTS users;

 create TABLE IF NOT EXISTS rating (
    rating_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    rating_name VARCHAR(10)
);

create TABLE IF NOT EXISTS genre (
    genre_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR(50)
);

create TABLE IF NOT EXISTS director (
director_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
name VARCHAR(100)
);

create TABLE IF NOT EXISTS film (
    film_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    description VARCHAR(200) NOT NULL,
    release_date DATE NOT NULL,
    duration INTEGER NOT NULL,
    rating_id INTEGER REFERENCES rating(rating_id)
);

create TABLE IF NOT EXISTS film_genre (
    film_id INTEGER REFERENCES film(film_id),
    genre_id INTEGER REFERENCES genre(genre_id),
    CONSTRAINT pk_film_genre PRIMARY KEY (film_id, genre_id)
);

create TABLE IF NOT EXISTS film_director (
film_id INTEGER REFERENCES film(film_id),
director_id INTEGER REFERENCES director(director_id),
CONSTRAINT pk_film_director PRIMARY KEY (film_id, director_id)
);

create TABLE IF NOT EXISTS users (
    user_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR(100),
    login VARCHAR(100) NOT NULL,
    email VARCHAR(100) NOT NULL,
    birthday DATE
);

create TABLE IF NOT EXISTS likes (
    film_id INTEGER REFERENCES film(film_id),
    user_id INTEGER REFERENCES users(user_id),
    CONSTRAINT pk_likes PRIMARY KEY (film_id, user_id)
);

create TABLE IF NOT EXISTS friendship (
    user_id INTEGER REFERENCES users(user_id),
    friend_id INTEGER REFERENCES users(user_id),
    status VARCHAR(50) CHECK (status IN ('PENDING', 'CONFIRMED'))
);
